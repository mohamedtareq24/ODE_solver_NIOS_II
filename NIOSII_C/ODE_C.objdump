
ODE_C.elf:     file format elf32-littlenios2
ODE_C.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000368 memsz 0x00000368 flags r-x
    LOAD off    0x00001388 vaddr 0x00004388 paddr 0x000043f8 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001468 vaddr 0x00004468 paddr 0x00004468 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000013f8  2**0
                  CONTENTS
  2 .text         0000031c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0000433c  0000433c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00004388  000043f8  00001388  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00004468  00004468  00001468  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00004474  00004474  000013f8  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  00001428  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008128  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a80  00000000  00000000  00009718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001832  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000208  00000000  00000000  0000c9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c03  00000000  00000000  0000cbd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000002e6  00000000  00000000  0000d7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000dac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  0000dad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ea5f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000ea62  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000ea6e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000ea6f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000ea70  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000ea79  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000ea82  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0000ea8b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0000ea99  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000433c l    d  .rodata	00000000 .rodata
00004388 l    d  .rwdata	00000000 .rwdata
00004468 l    d  .bss	00000000 .bss
00004474 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/PROJECTS/ODE_solver/NIOSII-C/software/ODE_C_bsp/obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 ODE_Solver_SW.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000430c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000041f8 g     F .text	0000002c alt_main
000043f8 g       *ABS*	00000000 __flash_rwdata_start
00004224 g     F .text	00000038 alt_putstr
000043e0 g     O .rwdata	00000004 jtag_uart
00004318 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000446c g     O .bss	00000004 alt_argv
0000c3e0 g       *ABS*	00000000 _gp
00004388 g     O .rwdata	00000030 alt_fd_list
00004280 g     F .text	00000058 altera_avalon_jtag_uart_read
000043e4 g     O .rwdata	00000004 alt_max_fd
00004474 g       *ABS*	00000000 __bss_end
00004104 g     F .text	00000040 alt_getchar
000043b8 g     O .rwdata	00000028 alt_dev_null
00004308 g     F .text	00000004 alt_dcache_flush_all
000043f8 g       *ABS*	00000000 __ram_rwdata_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory
000043e8 g     O .rwdata	00000008 alt_dev_list
00004388 g       *ABS*	00000000 __ram_rodata_end
00004474 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000042d8 g     F .text	00000030 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
0000427c g     F .text	00000004 alt_sys_init
00004388 g       *ABS*	00000000 __ram_rwdata_start
0000433c g       *ABS*	00000000 __ram_rodata_start
00004474 g       *ABS*	00000000 __alt_stack_base
00004468 g       *ABS*	00000000 __bss_start
0000405c g     F .text	000000a8 main
00004468 g     O .bss	00000004 alt_envp
0000433c g       *ABS*	00000000 __flash_rodata_start
0000425c g     F .text	00000020 alt_irq_init
00004470 g     O .bss	00000004 alt_argc
000043f0 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000043f8 g       *ABS*	00000000 _edata
00004474 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004320 g     F .text	0000001c strlen
00004314 g     F .text	00000004 alt_icache_flush_all
00004144 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b0f814 	ori	gp,gp,50144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10911a14 	ori	r2,r2,17512

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d11d14 	ori	r3,r3,17524

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00041440 	call	4144 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041f80 	call	41f8 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#define B 0x0028f

int main()
{ 
	char reset;
	 alt_putstr("SPRING MASS SYSTEM SIM\n");
    405c:	01000034 	movhi	r4,0
{ 
    4060:	defffb04 	addi	sp,sp,-20
	 alt_putstr("SPRING MASS SYSTEM SIM\n");
    4064:	2110cf04 	addi	r4,r4,17212
{ 
    4068:	dfc00415 	stw	ra,16(sp)
    406c:	dcc00315 	stw	r19,12(sp)
    4070:	dc800215 	stw	r18,8(sp)
    4074:	dc400115 	stw	r17,4(sp)
    4078:	dc000015 	stw	r16,0(sp)
	 alt_putstr("SPRING MASS SYSTEM SIM\n");
    407c:	00042240 	call	4224 <alt_putstr>
	 alt_putstr("press 'r' to reset or 's' to start\r\n");
    4080:	01000034 	movhi	r4,0
    4084:	2110d504 	addi	r4,r4,17236
    4088:	00042240 	call	4224 <alt_putstr>
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE,0b0);
  }
  else if (reset == 's'){
  IOWR_ALTERA_AVALON_PIO_DATA(CLK_EN_BASE,0b0);

  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE,0b1);  // rst the solver
    408c:	04000044 	movi	r16,1

  IOWR_ALTERA_AVALON_PIO_DATA(V_BASE,V);
  IOWR_ALTERA_AVALON_PIO_DATA(X_BASE,X);  
    4090:	04e00014 	movui	r19,32768
  IOWR_ALTERA_AVALON_PIO_DATA(K_BASE,K); 
    4094:	04800074 	movhi	r18,1
  IOWR_ALTERA_AVALON_PIO_DATA(B_BASE,B);
    4098:	0440a3c4 	movi	r17,655
  reset = alt_getchar();
    409c:	00041040 	call	4104 <alt_getchar>
  if (reset == 'r'){
    40a0:	10803fcc 	andi	r2,r2,255
    40a4:	1080201c 	xori	r2,r2,128
    40a8:	10bfe004 	addi	r2,r2,-128
    40ac:	10c01c98 	cmpnei	r3,r2,114
    40b0:	1800031e 	bne	r3,zero,40c0 <main+0x64>
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE,0b0);
    40b4:	00a40414 	movui	r2,36880
    40b8:	10000035 	stwio	zero,0(r2)
    40bc:	003ff706 	br	409c <main+0x40>
  else if (reset == 's'){
    40c0:	10801cd8 	cmpnei	r2,r2,115
    40c4:	103ff51e 	bne	r2,zero,409c <main+0x40>
  IOWR_ALTERA_AVALON_PIO_DATA(CLK_EN_BASE,0b0);
    40c8:	00a40014 	movui	r2,36864
    40cc:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(RST_BASE,0b1);  // rst the solver
    40d0:	00a40414 	movui	r2,36880
    40d4:	14000035 	stwio	r16,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(V_BASE,V);
    40d8:	00a41414 	movui	r2,36944
    40dc:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(X_BASE,X);  
    40e0:	00a41014 	movui	r2,36928
    40e4:	14c00035 	stwio	r19,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(K_BASE,K); 
    40e8:	00a40814 	movui	r2,36896
    40ec:	14800035 	stwio	r18,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(B_BASE,B);
    40f0:	00a40c14 	movui	r2,36912
    40f4:	14400035 	stwio	r17,0(r2)

  IOWR_ALTERA_AVALON_PIO_DATA(CLK_EN_BASE,0b1); // clk is enabled 
    40f8:	00a40014 	movui	r2,36864
    40fc:	14000035 	stwio	r16,0(r2)
    4100:	003fe606 	br	409c <main+0x40>

00004104 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4104:	00800034 	movhi	r2,0
    4108:	11d0e417 	ldw	r7,17296(r2)
{
    410c:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4110:	01000034 	movhi	r4,0
    4114:	01800044 	movi	r6,1
    4118:	d94000c4 	addi	r5,sp,3
    411c:	2110f804 	addi	r4,r4,17376
{
    4120:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    4124:	00042800 	call	4280 <altera_avalon_jtag_uart_read>
    4128:	0080040e 	bge	zero,r2,413c <alt_getchar+0x38>
        return -1;
    }
    return c;
    412c:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
    4130:	dfc00117 	ldw	ra,4(sp)
    4134:	dec00204 	addi	sp,sp,8
    4138:	f800283a 	ret
        return -1;
    413c:	00bfffc4 	movi	r2,-1
    4140:	003ffb06 	br	4130 <alt_getchar+0x2c>

00004144 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4144:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4148:	00800034 	movhi	r2,0
    414c:	00c00034 	movhi	r3,0
    4150:	dfc00015 	stw	ra,0(sp)
    4154:	1090e204 	addi	r2,r2,17288
    4158:	18d0fe04 	addi	r3,r3,17400
    415c:	10c00326 	beq	r2,r3,416c <alt_load+0x28>
  {
    while( to != end )
    4160:	01000034 	movhi	r4,0
    4164:	2110fe04 	addi	r4,r4,17400
    4168:	1100141e 	bne	r2,r4,41bc <alt_load+0x78>
  if (to != from)
    416c:	00800034 	movhi	r2,0
    4170:	00c00034 	movhi	r3,0
    4174:	10900804 	addi	r2,r2,16416
    4178:	18d00804 	addi	r3,r3,16416
    417c:	10c00326 	beq	r2,r3,418c <alt_load+0x48>
    while( to != end )
    4180:	01000034 	movhi	r4,0
    4184:	21100804 	addi	r4,r4,16416
    4188:	1100111e 	bne	r2,r4,41d0 <alt_load+0x8c>
  if (to != from)
    418c:	00800034 	movhi	r2,0
    4190:	00c00034 	movhi	r3,0
    4194:	1090cf04 	addi	r2,r2,17212
    4198:	18d0cf04 	addi	r3,r3,17212
    419c:	10c00326 	beq	r2,r3,41ac <alt_load+0x68>
    while( to != end )
    41a0:	01000034 	movhi	r4,0
    41a4:	2110e204 	addi	r4,r4,17288
    41a8:	11000e1e 	bne	r2,r4,41e4 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    41ac:	00043080 	call	4308 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    41b0:	dfc00017 	ldw	ra,0(sp)
    41b4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    41b8:	00043141 	jmpi	4314 <alt_icache_flush_all>
    {
      *to++ = *from++;
    41bc:	19400017 	ldw	r5,0(r3)
    41c0:	10800104 	addi	r2,r2,4
    41c4:	18c00104 	addi	r3,r3,4
    41c8:	117fff15 	stw	r5,-4(r2)
    41cc:	003fe606 	br	4168 <alt_load+0x24>
    41d0:	19400017 	ldw	r5,0(r3)
    41d4:	10800104 	addi	r2,r2,4
    41d8:	18c00104 	addi	r3,r3,4
    41dc:	117fff15 	stw	r5,-4(r2)
    41e0:	003fe906 	br	4188 <alt_load+0x44>
    41e4:	19400017 	ldw	r5,0(r3)
    41e8:	10800104 	addi	r2,r2,4
    41ec:	18c00104 	addi	r3,r3,4
    41f0:	117fff15 	stw	r5,-4(r2)
    41f4:	003fec06 	br	41a8 <alt_load+0x64>

000041f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41fc:	0009883a 	mov	r4,zero
{
    4200:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    4204:	000425c0 	call	425c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4208:	000427c0 	call	427c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    420c:	d1a02217 	ldw	r6,-32632(gp)
    4210:	d1602317 	ldw	r5,-32628(gp)
    4214:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4218:	dfc00017 	ldw	ra,0(sp)
    421c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    4220:	000405c1 	jmpi	405c <main>

00004224 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    4224:	defffe04 	addi	sp,sp,-8
    4228:	dc000015 	stw	r16,0(sp)
    422c:	dfc00115 	stw	ra,4(sp)
    4230:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4234:	00043200 	call	4320 <strlen>
    4238:	01000034 	movhi	r4,0
    423c:	000f883a 	mov	r7,zero
    4240:	100d883a 	mov	r6,r2
    4244:	800b883a 	mov	r5,r16
    4248:	2110f804 	addi	r4,r4,17376
#else
    return fputs(str, stdout);
#endif
#endif
}
    424c:	dfc00117 	ldw	ra,4(sp)
    4250:	dc000017 	ldw	r16,0(sp)
    4254:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4258:	00042d81 	jmpi	42d8 <altera_avalon_jtag_uart_write>

0000425c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    425c:	deffff04 	addi	sp,sp,-4
    4260:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    4264:	00043180 	call	4318 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4268:	00800044 	movi	r2,1
    426c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4270:	dfc00017 	ldw	ra,0(sp)
    4274:	dec00104 	addi	sp,sp,4
    4278:	f800283a 	ret

0000427c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    427c:	f800283a 	ret

00004280 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    4280:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    4284:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    4288:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    428c:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
    4290:	11800536 	bltu	r2,r6,42a8 <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
    4294:	11400b1e 	bne	r2,r5,42c4 <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    4298:	39d0000c 	andi	r7,r7,16384
    429c:	38000c1e 	bne	r7,zero,42d0 <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
    42a0:	00bffec4 	movi	r2,-5
}
    42a4:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    42a8:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    42ac:	1a60000c 	andi	r9,r3,32768
    42b0:	48000326 	beq	r9,zero,42c0 <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    42b4:	10c00005 	stb	r3,0(r2)
    42b8:	10800044 	addi	r2,r2,1
    42bc:	003ff406 	br	4290 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
    42c0:	11400226 	beq	r2,r5,42cc <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
    42c4:	1145c83a 	sub	r2,r2,r5
    42c8:	f800283a 	ret
    else if(flags & O_NONBLOCK)
    42cc:	403ff026 	beq	r8,zero,4290 <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
    42d0:	00bffd44 	movi	r2,-11
    42d4:	f800283a 	ret

000042d8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    42d8:	21000017 	ldw	r4,0(r4)
{
    42dc:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    42e0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    42e4:	29800136 	bltu	r5,r6,42ec <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    42e8:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    42ec:	20c00137 	ldwio	r3,4(r4)
    42f0:	18ffffec 	andhi	r3,r3,65535
    42f4:	183ffb26 	beq	r3,zero,42e4 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    42f8:	28c00007 	ldb	r3,0(r5)
    42fc:	29400044 	addi	r5,r5,1
    4300:	20c00035 	stwio	r3,0(r4)
    4304:	003ff706 	br	42e4 <altera_avalon_jtag_uart_write+0xc>

00004308 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4308:	f800283a 	ret

0000430c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    430c:	3005883a 	mov	r2,r6
  return len;
}
    4310:	f800283a 	ret

00004314 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4314:	f800283a 	ret

00004318 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4318:	000170fa 	wrctl	ienable,zero
}
    431c:	f800283a 	ret

00004320 <strlen>:
    4320:	2005883a 	mov	r2,r4
    4324:	10c00007 	ldb	r3,0(r2)
    4328:	1800021e 	bne	r3,zero,4334 <strlen+0x14>
    432c:	1105c83a 	sub	r2,r2,r4
    4330:	f800283a 	ret
    4334:	10800044 	addi	r2,r2,1
    4338:	003ffa06 	br	4324 <strlen+0x4>
